1.
void LList::rearrange(int v1, int v2, int k)
{
	if (head == nullptr)
		return;
	if (k < 2)
		return;
	LListNode* ptrK = head;
	for (int i = 0; i < k && ptrK != NULL; i++)
	{
		ptrK = ptrK->next;
	}
	if (ptrK == NULL || ptrK->next == NULL)
		return;
	LListNode* curV1;
	LListNode* curV2 = ptrK;
	if (head->info < v1)
	{
		while (curV2->next->info <= v2)
			curV2 = curV2->next;

		LListNode* tmp = head->next;
		LListNode* tmp2 = head;
		head->next = curV2->next->next;
		curV2->next->next = tmp;
		head = curV2->next;
		curV2->next = tmp2;
		tmp = nullptr;
		tmp2 = nullptr;
		curV2 = curV2->next;
		this->printAll();
	}
	curV1 = head;
	while (curV1->next != ptrK)
	{
		if (curV1->next->info < v1)
		{
			while(curV2->next->info <= v2)
				curV2 = curV2->next;

			LListNode* tmp = curV1->next;
			LListNode* tmp2 = curV2->next->next;
			curV1->next = curV2->next;
			curV2->next = tmp;
			curV1->next->next = tmp->next;
			tmp->next = tmp2;

			tmp = nullptr;
			tmp2 = nullptr;
			curV2 = curV2->next;

			this->printAll();

		}
		curV1 = curV1->next;
	}
	return;

}